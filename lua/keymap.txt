

s  <Tab>       * <Lua 25: vim/_defaults.lua:0>
                 vim.snippet.jump if active, otherwise <Tab>
n  <Space>fh   * <Cmd>Telescope help_tags<CR>
n  <Space>fb   * <Cmd>Telescope buffers<CR>
n  <Space>fg   * <Cmd>Telescope live_grep<CR>
n  <Space>ff   * <Cmd>Telescope find_files<CR>
n  <Space>u    * :UndotreeToggle<CR>
x  #           * <Lua 9: vim/_defaults.lua:0>
                 :help v_#-default
o  %             <Plug>(MatchitOperationForward)
x  %             <Plug>(MatchitVisualForward)
n  %             <Plug>(MatchitNormalForward)
n  &           * :&&<CR>
                 :help &-default
x  *           * <Lua 4: vim/_defaults.lua:0>
                 :help v_star-default
x  @           * mode() ==# 'V' ? ':normal! @'.getcharstr().'<CR>' : '@'
                 :help v_@-default
x  Q           * mode() ==# 'V' ? ':normal! @<C-R>=reg_recorded()<CR><CR>' : 'Q'
                 :help v_Q-default
n  Y           * y$
                 :help Y-default
o  [%            <Plug>(MatchitOperationMultiBackward)
x  [%            <Plug>(MatchitVisualMultiBackward)
n  [%            <Plug>(MatchitNormalMultiBackward)
n  [<Space>    * <Lua 59: vim/_defaults.lua:0>
                 Add empty line above cursor
n  [B          * <Lua 57: vim/_defaults.lua:0>
                 :brewind
n  [b          * <Lua 55: vim/_defaults.lua:0>
                 :bprevious
n  [<C-T>      * <Lua 53: vim/_defaults.lua:0>
                  :ptprevious
n  [T          * <Lua 51: vim/_defaults.lua:0>
                 :trewind
n  [t          * <Lua 49: vim/_defaults.lua:0>
                 :tprevious
n  [A          * <Lua 47: vim/_defaults.lua:0>
                 :rewind
n  [a          * <Lua 45: vim/_defaults.lua:0>
                 :previous
n  [<C-L>      * <Lua 43: vim/_defaults.lua:0>
                 :lpfile
n  [L          * <Lua 41: vim/_defaults.lua:0>
                 :lrewind
n  [l          * <Lua 39: vim/_defaults.lua:0>
                 :lprevious
n  [<C-Q>      * <Lua 37: vim/_defaults.lua:0>
                 :cpfile
n  [Q          * <Lua 35: vim/_defaults.lua:0>
                 :crewind
n  [q          * <Lua 33: vim/_defaults.lua:0>
                 :cprevious
n  [D          * <Lua 31: vim/_defaults.lua:0>
                 Jump to the first diagnostic in the current buffer
n  [d          * <Lua 29: vim/_defaults.lua:0>
                 Jump to the previous diagnostic in the current buffer
o  ]%            <Plug>(MatchitOperationMultiForward)
x  ]%            <Plug>(MatchitVisualMultiForward)
n  ]%            <Plug>(MatchitNormalMultiForward)
n  ]<Space>    * <Lua 60: vim/_defaults.lua:0>
                 Add empty line below cursor
n  ]B          * <Lua 58: vim/_defaults.lua:0>
                 :blast
n  ]b          * <Lua 56: vim/_defaults.lua:0>
                 :bnext
n  ]<C-T>      * <Lua 54: vim/_defaults.lua:0>
                 :ptnext
n  ]T          * <Lua 52: vim/_defaults.lua:0>
                 :tlast
n  ]t          * <Lua 50: vim/_defaults.lua:0>
                 :tnext
n  ]A          * <Lua 48: vim/_defaults.lua:0>
                 :last
n  ]a          * <Lua 46: vim/_defaults.lua:0>
                 :next
n  ]<C-L>      * <Lua 44: vim/_defaults.lua:0>
                 :lnfile
n  ]L          * <Lua 42: vim/_defaults.lua:0>
                 :llast
n  ]l          * <Lua 40: vim/_defaults.lua:0>
                 :lnext
n  ]<C-Q>      * <Lua 38: vim/_defaults.lua:0>
                 :cnfile
n  ]Q          * <Lua 36: vim/_defaults.lua:0>
                 :clast
n  ]q          * <Lua 34: vim/_defaults.lua:0>
                 :cnext
n  ]D          * <Lua 30: vim/_defaults.lua:0>
                 Jump to the last diagnostic in the current buffer
n  ]d          * <Lua 28: vim/_defaults.lua:0>
                 Jump to the next diagnostic in the current buffer
x  a%            <Plug>(MatchitVisualTextObject)
o  g%            <Plug>(MatchitOperationBackward)
x  g%            <Plug>(MatchitVisualBackward)
n  g%            <Plug>(MatchitNormalBackward)
n  gcA         * <Lua 105: ~/.local/share/nvim/lazy/Comment.nvim/lua/Comment/api.lua:218>
                 Comment insert end of line
n  gcO         * <Lua 104: ~/.local/share/nvim/lazy/Comment.nvim/lua/Comment/api.lua:179>
                 Comment insert above
n  gco         * <Lua 13: ~/.local/share/nvim/lazy/Comment.nvim/lua/Comment/api.lua:182>
                 Comment insert below
x  gb          * <Plug>(comment_toggle_blockwise_visual)
                 Comment toggle blockwise (visual)
n  gbc         * <Lua 14: ~/.local/share/nvim/lazy/Comment.nvim/lua/Comment/init.lua:107>
                 Comment toggle current block
n  gb          * <Plug>(comment_toggle_blockwise)
                 Comment toggle blockwise
n  gO          * <Lua 21: vim/_defaults.lua:0>
                 vim.lsp.buf.document_symbol()
n  gri         * <Lua 20: vim/_defaults.lua:0>
                 vim.lsp.buf.implementation()
n  grr         * <Lua 19: vim/_defaults.lua:0>
                 vim.lsp.buf.references()
x  gra         * <Lua 18: vim/_defaults.lua:0>
                 vim.lsp.buf.code_action()
n  gra         * <Lua 17: vim/_defaults.lua:0>
                 vim.lsp.buf.code_action()
n  grn         * <Lua 16: vim/_defaults.lua:0>
                 vim.lsp.buf.rename()
o  gc          * <Lua 15: vim/_defaults.lua:0>
                 Comment textobject
n  gcc         * <Lua 12: ~/.local/share/nvim/lazy/Comment.nvim/lua/Comment/init.lua:103>
                 Comment toggle current line
x  gc          * <Plug>(comment_toggle_linewise_visual)
                 Comment toggle linewise (visual)
n  gc          * <Plug>(comment_toggle_linewise)
                 Comment toggle linewise
x  gx          * <Lua 11: vim/_defaults.lua:0>
                 Opens filepath or URI under cursor with the system handler (file explorer, web browser, …)
n  gx          * <Lua 10: vim/_defaults.lua:0>
                 Opens filepath or URI under cursor with the system handler (file explorer, web browser, …)
x  <Plug>(MatchitVisualTextObject)   <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
o  <Plug>(MatchitOperationMultiForward) * :<C-U>call matchit#MultiMatch("W",  "o")<CR>
o  <Plug>(MatchitOperationMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "o")<CR>
x  <Plug>(MatchitVisualMultiForward) * :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``
x  <Plug>(MatchitVisualMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``
n  <Plug>(MatchitNormalMultiForward) * :<C-U>call matchit#MultiMatch("W",  "n")<CR>
n  <Plug>(MatchitNormalMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "n")<CR>
o  <Plug>(MatchitOperationBackward) * :<C-U>call matchit#Match_wrapper('',0,'o')<CR>
o  <Plug>(MatchitOperationForward) * :<C-U>call matchit#Match_wrapper('',1,'o')<CR>
x  <Plug>(MatchitVisualBackward) * :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``
x  <Plug>(MatchitVisualForward) * :<C-U>call matchit#Match_wrapper('',1,'v')<CR>:if col("''") != col("$") | exe ":normal! m'" | endif<CR>gv``
n  <Plug>(MatchitNormalBackward) * :<C-U>call matchit#Match_wrapper('',0,'n')<CR>
n  <Plug>(MatchitNormalForward) * :<C-U>call matchit#Match_wrapper('',1,'n')<CR>
x  <Plug>(comment_toggle_blockwise_visual) * <Esc><Cmd>lua require("Comment.api").locked("toggle.blockwise")(vim.fn.visualmode())<CR>
                 Comment toggle blockwise (visual)
x  <Plug>(comment_toggle_linewise_visual) * <Esc><Cmd>lua require("Comment.api").locked("toggle.linewise")(vim.fn.visualmode())<CR>
                 Comment toggle linewise (visual)
n  <Plug>(comment_toggle_blockwise_count) * <Lua 102: ~/.local/share/nvim/lazy/Comment.nvim/lua/Comment/api.lua:246>
                 Comment toggle blockwise with count
n  <Plug>(comment_toggle_linewise_count) * <Lua 101: ~/.local/share/nvim/lazy/Comment.nvim/lua/Comment/api.lua:246>
                 Comment toggle linewise with count
n  <Plug>(comment_toggle_blockwise_current) * <Lua 100: ~/.local/share/nvim/lazy/Comment.nvim/lua/Comment/api.lua:246>
                 Comment toggle current block
n  <Plug>(comment_toggle_linewise_current) * <Lua 98: ~/.local/share/nvim/lazy/Comment.nvim/lua/Comment/api.lua:246>
                 Comment toggle current line
n  <Plug>(comment_toggle_blockwise) * <Lua 96: ~/.local/share/nvim/lazy/Comment.nvim/lua/Comment/api.lua:246>
                 Comment toggle blockwise
n  <Plug>(comment_toggle_linewise) * <Lua 94: ~/.local/share/nvim/lazy/Comment.nvim/lua/Comment/api.lua:246>
                 Comment toggle linewise
n  <Plug>PlenaryTestFile * :lua require('plenary.test_harness').test_file(vim.fn.expand("%:p"))<CR>
n  <C-W><C-D>    <C-W>d
                 Show diagnostics under the cursor
n  <C-W>d      * <Lua 32: vim/_defaults.lua:0>
                 Show diagnostics under the cursor
s  <S-Tab>     * <Lua 27: vim/_defaults.lua:0>
                 vim.snippet.jump if active, otherwise <S-Tab>
s  <C-S>       * <Lua 23: vim/_defaults.lua:0>
                 vim.lsp.buf.signature_help()
n  <C-L>       * <Cmd>nohlsearch|diffupdate|normal! <C-L><CR>
                 :help CTRL-L-default
